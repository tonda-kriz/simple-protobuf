name: Linux build + gpb compatibility tests

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    name: |
      ${{ matrix.os }}, ${{ matrix.compiler }}, ${{ matrix.version }}
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        include:
          - os: ubuntu-latest
            compiler: gcc
            build_type: Release
            version: '13'
          - os: ubuntu-latest
            compiler: clang
            build_type: Release
            version: '14'
          - os: ubuntu-latest
            compiler: clang
            build_type: Release
            version: '15'

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install Linux dependencies
      if: startsWith(matrix.os, 'ubuntu-')
      run: >
          sudo apt-get install
          ninja-build
          protobuf-compiler
    - name: Install gcc
      if: startsWith(matrix.os, 'ubuntu-') && matrix.compiler == 'gcc'
      run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get install g++-${{ matrix.version }}
          sudo apt-get install gcc-${{ matrix.version }}
          echo "CXX=g++-${{ matrix.version }}" >> ${GITHUB_ENV}
          echo "CC=gcc-${{ matrix.version }}" >> ${GITHUB_ENV}
    - name: Install clang
      if: startsWith(matrix.os, 'ubuntu-') && matrix.compiler == 'clang'
      run: |
            sudo apt-get update
            sudo apt-get install clang-${{ matrix.version }}
            echo "CXX=clang++-${{ matrix.version }}" >> ${GITHUB_ENV}
            echo "CC=clang-${{ matrix.version }}" >> ${GITHUB_ENV}
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DSPB_PROTO_BUILD_TESTS=ON
        -DSPB_PROTO_BUILD_EXAMPLES=ON
        -DSPB_PROTO_BUILD_COMPATIBILITY_TESTS=ON
        -DSPB_PROTO_BUILD_ETL_TESTS=ON
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
